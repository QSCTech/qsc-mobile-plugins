// Generated by CoffeeScript 1.6.1
/*
 * base64.coffee, v1.0
 * https://github.com/rwz/base64.coffee
 *
 * Copyright 2012 Pavel Pravosud
 * Licensed under the MIT license.
 * http://opensource.org/licenses/mit-license
 *
 * References: http://en.wikipedia.org/wiki/Base64
 *
 * Date: Sat Jan 7 17:30:44 ICT 2012
*/

var CHARACTERS, CHARMAP, INVALID_CHARACTERS, InvalidSequenceError, M, QSCMobile, char, decode, encode, fromCharCode, i, pack, unpack, _i, _len, _ref, _ref1, _ref2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fromCharCode = String.fromCharCode;

CHARACTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

INVALID_CHARACTERS = /[^a-z\d\+\=\/]/ig;

CHARMAP = {};

_ref = CHARACTERS.split('');
for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
  char = _ref[i];
  CHARMAP[char] = i;
}

InvalidSequenceError = (function(_super) {

  __extends(InvalidSequenceError, _super);

  InvalidSequenceError.prototype.name = 'InvalidSequence';

  function InvalidSequenceError(char) {
    if (char) {
      this.message = "\"" + char + "\" is an invalid Base64 character";
    } else {
      this.message = 'Invalid bytes sequence';
    }
  }

  return InvalidSequenceError;

})(Error);

encode = (_ref1 = this.btoa) != null ? _ref1 : this.btoa = function(input) {
  var chr1, chr2, chr3, enc1, enc2, enc3, enc4, invalidChar, output, _j, _len1, _ref2;
  output = '';
  i = 0;
  while (i < input.length) {
    chr1 = input.charCodeAt(i++);
    chr2 = input.charCodeAt(i++);
    chr3 = input.charCodeAt(i++);
    if (invalidChar = Math.max(chr1, chr2, chr3) > 0xFF) {
      throw new InvalidSequenceError(invalidChar);
    }
    enc1 = chr1 >> 2;
    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
    enc4 = chr3 & 63;
    if (isNaN(chr2)) {
      enc3 = enc4 = 64;
    } else if (isNaN(chr3)) {
      enc4 = 64;
    }
    _ref2 = [enc1, enc2, enc3, enc4];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      char = _ref2[_j];
      output += CHARACTERS.charAt(char);
    }
  }
  return output;
};

decode = (_ref2 = this.atob) != null ? _ref2 : this.atob = function(input) {
  var chr1, chr2, chr3, enc1, enc2, enc3, enc4, length, output;
  output = '';
  i = 0;
  length = input.length;
  if (length % 4) {
    throw new InvalidSequenceError;
  }
  while (i < length) {
    enc1 = CHARMAP[input.charAt(i++)];
    enc2 = CHARMAP[input.charAt(i++)];
    enc3 = CHARMAP[input.charAt(i++)];
    enc4 = CHARMAP[input.charAt(i++)];
    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;
    output += fromCharCode(chr1);
    if (enc3 !== 64) {
      output += fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output += fromCharCode(chr3);
    }
  }
  return output;
};

unpack = function(utfstring) {
  var c, string, _j, _ref3;
  utfstring = utfstring.replace(/\r\n/g, '\n');
  string = '';
  for (i = _j = 0, _ref3 = utfstring.length - 1; 0 <= _ref3 ? _j <= _ref3 : _j >= _ref3; i = 0 <= _ref3 ? ++_j : --_j) {
    c = utfstring.charCodeAt(i);
    if (c < 128) {
      string += fromCharCode(c);
    } else if (c > 127 && c < 2048) {
      string += fromCharCode((c >> 6) | 192);
      string += fromCharCode((c & 63) | 128);
    } else {
      string += fromCharCode((c >> 12) | 224);
      string += fromCharCode(((c >> 6) & 63) | 128);
      string += fromCharCode((c & 63) | 128);
    }
  }
  return string;
};

pack = function(string) {
  var c, c1, c2, c3, utfstring;
  utfstring = '';
  i = c = c1 = c2 = 0;
  while (i < string.length) {
    c = string.charCodeAt(i);
    if (c < 128) {
      utfstring += fromCharCode(c);
      i++;
    } else if ((c > 191) && (c < 224)) {
      c2 = string.charCodeAt(i + 1);
      utfstring += fromCharCode(((c & 31) << 6) | (c2 & 63));
      i += 2;
    } else {
      c2 = string.charCodeAt(i + 1);
      c3 = string.charCodeAt(i + 2);
      utfstring += fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      i += 3;
    }
  }
  return utfstring;
};

this.Base64 = {
  encode64: function(str) {
    return encode(unpack(str));
  },
  decode64: function(str) {
    return pack(decode(str.replace(INVALID_CHARACTERS, '')));
  }
};

/*
QSCMobile API
*/


QSCMobile = (function() {

  function QSCMobile() {}

  /*
  @param {Object} opts - config options
  */


  QSCMobile.prototype.construtor = function(opts) {
    this.opts = opts;
    this.callbacks = {};
    return this.requestCount = 0;
  };

  /*
  向平台发送请求
  
  @private
  @param {Object} msg - msg
  @param {String} msg.fn - 平台应执行的函数
  @param {Object} msg.args - 函数参数
  @param {Object} msg.success - The callback that handles data when success
  @param {Object} msg.error - The callback that handles error
  */


  QSCMobile.prototype.sendMessage = function(msg) {
    var args, error, fn, id, prefix, success;
    fn = msg.fn, args = msg.args, success = msg.success, error = msg.error;
    this.requestCount++;
    id = this.requestCount;
    this.callbacks[id] = {};
    this.callbacks[id].success = success;
    this.callbacks[id].error = error;
    msg = JSON.stringify({
      id: id,
      fn: fn,
      args: args
    });
    prefix = 'data:text/qscmobile-msg;base64,';
    msg = prefix + window.Base64.encode64(msg);
    return window.location.href = msg;
  };

  /*
  平台向 Webview 返回消息时直接注入调用
  
  @example
    M.onMessage({id: 123, data: 'hello world'});
  
  @private
  @param {Object} msg - msg
  @param {Interger} msg.id - Request ID
  @param {String} msg.data - 函数返回数据
  @param {String} msg.error - 错误信息
  */


  QSCMobile.prototype.onMessage = function(msg) {
    var data, error, id, _base, _base1;
    id = msg.id, data = msg.data, error = msg.error;
    if (error) {
      return typeof (_base = this.callbacks[id]).error === "function" ? _base.error(error) : void 0;
    } else {
      return typeof (_base1 = this.callbacks[id]).success === "function" ? _base1.success(data) : void 0;
    }
  };

  /*
  QSC Mobile View API
  
  @example
    M.view.card('qiuShiGou', 'title', 'Here is some contents');
  
  @mixin
  */


  QSCMobile.prototype.view = {
    /*
    按照参数绘制 card
    
    @param {String} pluginID pluginID
    @param {String} title card title
    @param {String} content card content
    */

    card: function(pluginID, title, content) {
      var args;
      args = {
        pluginID: pluginID,
        title: title,
        content: content
      };
      return this.sendMessage({
        fn: 'view.card',
        args: args
      });
    }
  };

  /*
  QSC Mobile KVDB API
  
  @example
    M.kvdb.set('key', 'value', onsuccess, onerror);
  
  @mixin
  */


  QSCMobile.prototype.kvdb = {
    /*
    写入记录
    
    @param {String} key key
    @param {String | Object} value value
    @param {Function} success The callback that handles data when success
    @param {Function} error The callback that handles error
    */

    set: function(key, value, success, error) {
      var msg;
      if (typeof value !== 'string') {
        value = JSON.stringify(value);
      }
      msg = {
        fn: 'kvdb.set',
        args: {
          key: key,
          value: value
        },
        success: success,
        error: error
      };
      return this.sendMessage(msg);
    },
    /*
    取出记录
    
    @note 若存入是 Object 或 JSON String 则取出时自动解析为 Object
    
    @param {String} key key
    @param {Function} success The callback that handles data when success
    @param {Function} error The callback that handles error
    */

    get: function(key, success, error) {
      var callback, msg;
      callback = function(data) {
        try {
          data = JSON.parse(data);
          return typeof success === "function" ? success(data) : void 0;
        } catch (e) {
          return typeof success === "function" ? success(data) : void 0;
        }
      };
      msg = {
        fn: 'kvdb.get',
        args: {
          key: key
        },
        success: callback,
        error: error
      };
      return this.sendMessage(msg);
    },
    /*
    删除记录
    
    @param {String} key - key
    @param {Function} success The callback that handles data when success
    @param {Function} error The callback that handles error
    */

    remove: function(key, success, error) {
      var msg;
      msg = {
        fn: 'kvdb.remove',
        args: {
          key: key
        },
        success: success,
        error: error
      };
      return this.sendMessage(msg);
    },
    /*
    清空记录
    
    @param {Function} success The callback that handles data when success
    @param {Function} error The callback that handles error
    */

    clear: function(success, error) {
      var msg;
      msg = {
        fn: 'kvdb.clear',
        success: success,
        error: error
      };
      return this.sendMessage(msg);
    }
  };

  /*
  QSCMobile Config API
  
  @example
    M.config.set('key', 'value', onsuccess, onerror);
  
  @mixin
  */


  QSCMobile.prototype.config = {
    set: function(key, value, success, error) {
      key = "__config:" + key;
      return this.KVDB.set(key, value, success, error);
    },
    get: function(key, success, error) {
      key = "__config:" + key;
      return this.KVDB.get(key, success, error);
    },
    remove: function(key, success, error) {
      key = "__config:" + key;
      return this.KVDB.remove(key, success, error);
    }
  };

  /*
  QSCMobile Config API
  
  @example
    var onsuccess = function(data) {
      console.log("Stuid is "+data);
    }
    var onerror = function(e) {
      console.log("Error: "+e);
    }
    M.user.stuid(onsuccess, onerror);
  
  @mixin
  */


  QSCMobile.prototype.user = {
    /*
    学号
    
    @param {Function} success The callback that handles data when success
    @param {Function} error The callback that handles error
    */

    stuid: function(success, error) {
      return this.sendMessage({
        fn: 'user.stuid',
        success: success,
        error: error
      });
    },
    /*
    密码
    
    @private
    
    @param {Function} success The callback that handles data when success
    @param {Function} error The callback that handles error
    */

    pwd: function(success, error) {
      return this.sendMessage({
        fn: 'user.pwd',
        success: success,
        error: error
      });
    }
  };

  return QSCMobile;

})();

M = new QSCMobile;
