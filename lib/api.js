// Generated by CoffeeScript 1.6.1
/*
QSCMobile API
JSDOC3: http://usejsdoc.org
*/

var M, QSCMobile;

QSCMobile = (function() {

    /** @class */
    function QSCMobile() {}

    /**
     * @constructor
     * @param {Object} opts - config options
     */
    QSCMobile.prototype.construtor = function(opts) {
        this.opts = opts;
        this.callbacks = {};
        return this.requestCount = 0;
    };

    /**
     * 向平台发送请求
     *
     * @private
     * @param {Object} msg - msg
     * @param {String} msg.fn - 平台应执行的函数
     * @param {Object} msg.args - 函数参数
     * @param {Request~success} msg.success - The callback that handles data when success
     * @param {Request~error} msg.error - The callback that handles error
     */

    /**
     * @callback success
     * @param {*} data data
     */

    /**
     * @callback error
     * @param {String} error error
     */

    QSCMobile.prototype.sendRequest = function(msg) {
        var args, error, fn, id, success;
        fn = msg.fn, args = msg.args, success = msg.success, error = msg.error;
        this.requestCount++;
        id = this.requestCount;
        this.callbacks[id] = {};
        this.callbacks[id].success = success;
        this.callbacks[id].error = error;
        msg = JSON.stringify({
            id: id,
            fn: fn,
            args: args
        });
        return window.location.href = msg;
    };

    /**
     * 平台向 Webview 返回消息时直接注入调用
     *
     * @private
     * @param {Object} msg - msg
     * @param {Interger} msg.id - Request ID
     * @param {String} msg.data - 函数返回数据
     * @param {String} msg.error - 错误信息
     */
    QSCMobile.prototype.onRequest = function(msg) {
        var data, error, id, _base, _base1;
        id = msg.id, data = msg.data, error = msg.error;
        if (error) {
            return typeof (_base = this.callbacks[id]).error === "function" ? _base.error(error) : void 0;
        } else {
            return typeof (_base1 = this.callbacks[id]).success === "function" ? _base1.success(data) : void 0;
        }
    };

    /**
     * USER
     * @namespace
     */
    QSCMobile.prototype.user = {

    /**
     * 学号
     *
     * @param {stuid~success} success - The callback that handles data when success
     * @param {Function} error - The callback that handles error
     */
    stuid: function(success, error) {
      return this.sendMessage({
        fn: 'user.stuid',
        success: success,
        error: error
      });
    },
    /*
    @param {Object} success - The callback that handles data when success
    @param {Object} error - The callback that handles error
    */

    pwd: function(success, error) {
      return this.sendMessage({
        fn: 'user.pwd',
        success: success,
        error: error
      });
    },
    /*
    @param {Object} success - The callback that handles data when success
    @param {Object} error - The callback that handles error
    */

    id: function(success, error) {
      return this.sendMessage({
        fn: 'user.id',
        success: success,
        error: error
      });
    },
    /*
    @param {Object} success - The callback that handles data when success
    @param {Object} error - The callback that handles error
    */

    name: function(success, error) {
      return this.sendMessage({
        fn: 'user.name',
        success: success,
        error: error
      });
    }
  };

  /*
  按照 data 绘制 card

  @param {String} pluginID - pluginID
  @param {String} title - card title
  @param {String} content - card content
  */


  QSCMobile.prototype.drawCard = function(pluginID, title, content) {
    var args;
    args = {
      pluginID: pluginID,
      title: title,
      content: content
    };
    return this.sendMessage({
      fn: 'draw.card',
      args: args
    });
  };

  /*  KVDB

  @namespace
  */


  QSCMobile.prototype.KVDB = {
    /*
    KVDB.set

    @param {String} key - key
    @param {*} value - value
    @param {Function} success - The callback that handles data when success
    @param {Function} error - The callback that handles error
    */

    set: function(key, value, success, error) {
      var msg;
      msg = {
        fn: 'KVDB.set',
        args: {
          key: key,
          value: value
        },
        success: success,
        error: error
      };
      return this.sendMessage(msg);
    },
    /*
    KVDB.get

    @param {String} key - key
    @param {Function} success - The callback that handles data when success
    @param {Function} error - The callback that handles error
    */

    get: function(key, success, error) {
      var msg;
      msg = {
        fn: 'KVDB.get',
        args: {
          key: key
        },
        success: success,
        error: error
      };
      return this.sendMessage(msg);
    },
    /*
    KVDB.remove

    @param {String} key - key
    @param {Function} success - The callback that handles data when success
    @param {Function} error - The callback that handles error
    */

    remove: function(key, success, error) {
      var msg;
      msg = {
        fn: 'KVDB.remove',
        args: {
          key: key
        },
        success: success,
        error: error
      };
      return this.sendMessage(msg);
    },
    /*
    KVDB.get

    @param {Function} success - The callback that handles data when success
    @param {Function} error - The callback that handles error
    */

    clear: function(success, error) {
      var msg;
      msg = {
        fn: 'KVDB.clear',
        success: success,
        error: error
      };
      return this.sendMessage(msg);
    }
  };

  return QSCMobile;

})();

M = new QSCMobile;
