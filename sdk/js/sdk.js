// Generated by CoffeeScript 1.6.1
var SDK;

SDK = (function() {

  function SDK() {
    var id;
    this.debug = true;
    $(window).on('hashchange', function() {
      return window.location.reload();
    });
    id = window.location.hash.replace(new RegExp('#', 'g'), '');
    if (id.length < 1) {
      window.location.hash = 'qiuShiGou';
    } else {
      this.loadPlugin(id);
    }
  }

  SDK.prototype.loadPlugin = function(pluginID) {
    var iframe, obj, prop, src,
      _this = this;
    src = "../plugins/" + pluginID + "/index.html";
    iframe = $('<iframe id="plugin-section" height="450" width="300" src="' + src + '"></iframe>')[0];
    iframe.onload = function() {
      var style;
      style = $('<link>')[0].cloneNode(true);
      style.href = "../../sdk/css/scrollbar.css";
      style.rel = 'stylesheet';
      style.type = 'text/css';
      style.onload = function() {
        var widthWithoutScrollbar;
        widthWithoutScrollbar = $('iframe').contents().find('html').width();
        $('#wrap').css({
          width: widthWithoutScrollbar + 'px',
          'padding-left': 300 - widthWithoutScrollbar + 'px'
        });
        return $('#wrap').animate({
          opacity: 1
        });
      };
      return $('iframe').contents().find('head').append(style);
    };
    $('#wrap').html(iframe);
    this.window = document.getElementById('plugin-section').contentWindow;
    obj = this.window.Object;
    if (!obj.prototype.watch) {
      prop = {
        enumerable: false,
        configurable: true,
        writable: false,
        value: function(prop, handle) {
          var getter, newval, oldval, setter;
          oldval = this.prop;
          newval = oldval;
          getter = function() {
            return newval;
          };
          setter = function(val) {
            oldval = newval;
            return newval = handle.call(this, prop, oldval, val);
          };
          return obj.defineProperty(this, prop, {
            get: getter,
            set: setter,
            enumerable: true,
            configurable: true
          });
        }
      };
      obj.defineProperty(obj.prototype, "watch", prop);
    }
    return this.window.watch('Platform', function(prop, oldval, val) {
      val.prototype.sendRequest = function(request) {
        var args, callbackName, error, errorFn, fn, random, success;
        fn = request.fn, args = request.args, success = request.success, error = request.error;
        errorFn = error;
        random = (Math.random() + '').replace(new RegExp('0\.', ''), '');
        callbackName = "QSCMobile" + random + "_" + (new Date().getTime());
        _this.window[callbackName] = function(data) {
          var _ref;
          _ref = data, data = _ref.data, error = _ref.error;
          if (error) {
            return typeof errorFn === "function" ? errorFn(error) : void 0;
          } else {
            return typeof success === "function" ? success(data) : void 0;
          }
        };
        return _this.onRequest({
          fn: fn,
          args: args,
          callback: callbackName
        });
      };
      return val;
    });
  };

  SDK.prototype.onRequest = function(request) {
    var args, callback, data, fn, part1, part2, _base, _ref;
    fn = request.fn, args = request.args, callback = request.callback;
    if (this.debug) {
      console.log("QSCMobile-Plugins-API-Request               ->   " + (JSON.stringify([fn, args])));
    }
    _ref = fn.split('.'), part1 = _ref[0], part2 = _ref[1];
    fn = this[part1][part2];
    data = fn.call(this, args);
    if (this.debug) {
      console.log("QSCMobile-Plugins-API-Request-Callback-Data ->   " + (JSON.stringify([data.data, data.error])));
    }
    return typeof (_base = this.window)[callback] === "function" ? _base[callback](data) : void 0;
  };

  SDK.prototype.user = {
    stuid: function() {
      return {
        data: "3000000000"
      };
    },
    pwd: function() {
      return {
        data: "123456"
      };
    }
  };

  SDK.prototype.kvdb = {
    get: function(args) {
      var key, msg;
      key = args.key;
      msg = {};
      try {
        msg.data = localStorage.getItem(key);
      } catch (e) {
        msg.error = e;
      }
      return msg;
    },
    set: function(args) {
      var key, msg, value;
      key = args.key, value = args.value;
      msg = {};
      try {
        msg.data = localStorage.setItem(key, value);
      } catch (e) {
        msg.error = e;
      }
      return msg;
    },
    remove: function(args) {
      var key, msg;
      key = args.key;
      msg = {};
      try {
        msg.data = localStorage.removeItem(key);
      } catch (e) {
        msg.error = e;
      }
      return msg;
    },
    clear: function(args) {
      var msg;
      msg = {};
      try {
        msg.data = localStorage.clear();
      } catch (e) {
        msg.error = e;
      }
      return msg;
    }
  };

  return SDK;

})();

$(function() {
  return $(document).ready(function() {
    return window.sdk = new SDK;
  });
});
